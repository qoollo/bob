syntax = "proto3";

package bob_storage;

// API
service BobApi {
    rpc Put (PutRequest) returns (OpStatus) {}
    rpc Get (GetRequest) returns (Blob) {}
    rpc Ping (Null) returns (Null) {}
    rpc Exist (ExistRequest) returns (ExistResponse) {}
}

message Null {};

// Put operation parameters
message PutRequest {
    BlobKey key = 1; // Blob's key
    Blob data = 2; // Data
    PutOptions options = 3; // options
}

// Get operation parameters
message GetRequest {
    BlobKey key = 1; // Blob's key
    GetOptions options = 2; // options
}

// Exist operation parameters
message ExistRequest {
    repeated BlobKey keys = 1; // Keys to check
    GetOptions options = 2; // Options, same as in get request
}

// Blob id
message BlobKey {
    uint64 key = 1; //Inner id representation
}

// Data blob
message Blob {
    bytes data = 1; // Data
    BlobMeta meta = 2; // Metadata
}

// Blob metadata
message BlobMeta {
    uint64 timestamp = 1; // timestamp for data version
}

// Operation status
message OpStatus {
    BobError error = 1; // If all good - null
}

message ExistResponse {
    repeated bool exist = 1;
}

// Put operation options
message PutOptions {
    repeated string remote_nodes = 1;
    bool force_node = 2; // Force operation to be served by node to which it comes
    bool overwrite = 3; // Overwrite data in case of id existens
}

enum GetSource {
    ALL = 0;
    NORMAL = 1;
    ALIEN = 2;
}

// Get operation options
message GetOptions {
    bool force_node = 1; // Force operation to be served by node to which it comes
    GetSource source = 2; // Set source for data reading
}

message BobError {
    int32 code = 1; // Error code in case of error
    string desc = 2; // Error desription
}
