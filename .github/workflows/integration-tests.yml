name: integration-tests
on:
  push:
    branches: [ "518-implement-semi-automatic-integration-tests" ]
  pull_request:
    branches: [ "518-implement-semi-automatic-integration-tests" ]
  pull_request_review:
    branches: [ "518-implement-semi-automatic-integration-tests" ]
  workflow_dispatch:
    inputs:
      amount_of_nodes:
        description: 'Amount of nodes in bob cluster for tests'
        required: true
        default: '4'
      storage_path:
        description: 'Path for test runtime files'
        required: true
        default: '/tmp'
      disks:
        description: 'Vdisks count'
        required: true
        default: '4'
      replicas:
        description: 'Amount of vdisks replicas'
        required: true
        default: '2'
      payload:
        description: 'Test payload'
        required: true
        default: '10240'
      count:
        description: 'Amount of records to process during test'
        required: true
        default: '10000'

jobs:
  build-binaries:
    strategy:
      matrix:
        key: [8, 16]
    env:
      TARGET: "x86_64-unknown-linux-musl"
      BUILD_MODE: "release"
    runs-on: ubuntu-latest
    steps:
      - name: Checks-out repository 
        uses: actions/checkout@v2
      - name: Set env variables and install packages
        run: |
          echo "BOB_COMMIT_HASH=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_ENV
          echo "BOB_KEY_SIZE=${{ matrix.key }}" >> $GITHUB_ENV
          sudo apt-get update && sudo apt-get install -y --no-install-recommends musl-tools
      - name: Install latest stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ env.TARGET }}
          default: true
      - name: Build binaries
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target=${{ env.TARGET }}
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: bob-binaries-${{ matrix.key }}
          path: |
            target/${{ env.TARGET }}/${{ env.BUILD_MODE }}/bobd
            target/${{ env.TARGET }}/${{ env.BUILD_MODE }}/bobp
            target/${{ env.TARGET }}/${{ env.BUILD_MODE }}/ccg
            target/${{ env.TARGET }}/${{ env.BUILD_MODE }}/brt
  build-docker-images:
    runs-on: ubuntu-latest
    environment: prod
    strategy:
      matrix:
        bob_key_size: [8, 16]
    steps:
      - name: Checks-out repository 
        uses: actions/checkout@v2
      - name: Set env
        run: |
          echo "VERSION=$(cat bob-apps/Cargo.toml | grep ^version | head -1 | awk '{print $3}' | sed -e 's/"//g' | sed -e 's/-/./g')" >> $GITHUB_ENV
          echo "BOB_COMMIT_HASH=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_ENV
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: qoollo/bob
          tags: |
            ${{ env.VERSION }}-key${{ matrix.key }}
      - name: Build and push alpine image
        uses: docker/build-push-action@v2
        with:
          outputs: type=docker,dest=/tmp/bob-images.tar
          context: .
          file: dockerfiles/alpine/Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            COMMIT_HASH=${{ env.BOB_COMMIT_HASH }}
            KEY_SIZE=${{ matrix.bob_key_size }}
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: bob-images
          path: |
            /tmp/bob-images.tar

  deploy-and-test:
    needs: build-binaries
    strategy:
      matrix:
        key: [8, 16]
    env:
      TARGET: "x86_64-unknown-linux-musl"
    runs-on: ubuntu-latest
    steps:
      - name: Checks-out repo
        uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Setup default variables for auto runs
        run: |
          INPUT=${{ github.event.inputs.amount_of_nodes }}
          echo "AMOUNT_OF_NODES=${INPUT:-"4"}" >> $GITHUB_ENV
          INPUT=${{ github.event.inputs.storage_path }}
          echo "STORAGE_PATH=${INPUT:-"/tmp"}" >> $GITHUB_ENV
          INPUT=${{ github.event.inputs.disks }}
          echo "DISKS=${INPUT:-"4"}" >> $GITHUB_ENV
          INPUT=${{ github.event.inputs.replicas }}
          echo "REPLICAS=${INPUT:-"2"}" >> $GITHUB_ENV
          INPUT=${{ github.event.inputs.payload }}
          echo "PAYLOAD=${INPUT:-"10240"}" >> $GITHUB_ENV
          INPUT=${{ github.event.inputs.count }}
          echo "COUNT=${INPUT:-"10000"}" >> $GITHUB_ENV
      - name: Install deps
        run: |
          /usr/bin/pip3 install -r ./requirements.txt
        working-directory: ./integration-tests
      - name: Get version data
        run: |
          echo "VERSION=$(cat bob-apps/Cargo.toml | grep ^version | head -1 | awk '{print $3}' | sed -e 's/"//g' | sed -e 's/-/./g')" >> $GITHUB_ENV
          echo "VERSION_NO_FORMATTING=$(cat bob-apps/Cargo.toml | grep ^version | head -1 | awk '{print $3}' | sed -e 's/"//g')" >> $GITHUB_ENV
      - name: Download binaries
        uses: actions/download-artifact@v2
        with:
          name: bob-binaries-${{ matrix.key }}
          path: ./integration-tests
      - name: Download docker images
        uses: actions/download-artifact@v2
        with:
          name: bob-images
          path: ./integration-tests
      - name: Load docker images
        run: |
          docker load --input bob-images.tar
      - name: List availible images
        run: |
          docker image ls
      - name: Generate config files for docker and bob
        run: |
          ./generate_from_templates.py -a ${{ env.AMOUNT_OF_NODES }} -v qoollo/bob:${{ env.VERSION }}-key${{ matrix.key }} --path ${{ env.STORAGE_PATH }}
        working-directory: ./integration-tests
      - name: Deploy docker containers
        run: |
          ./deploy.py --path ${{ env.STORAGE_PATH }}/generated_configs -d ${{ env.DISKS }} -r ${{ env.REPLICAS }}
        working-directory: ./integration-tests
      - name: Run write/read tests
        run: |
          ./tests.py -l ${{ env.PAYLOAD }} -c ${{ env.COUNT }} -n 0.0.0.0 -k ${{ matrix.key }}
        working-directory: ./integration-tests
